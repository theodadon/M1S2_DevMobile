@file:Suppress("DEPRECATION")

package com.example.cnireader.nfc

import android.nfc.Tag
import android.nfc.tech.IsoDep
import com.example.cnireader.util.PassportLogger

object IsoDepReader {

    suspend fun read(tag: Tag, logger: PassportLogger) {
        val isoDep = IsoDep.get(tag)
            ?: throw Exception("IsoDep non support√©")

        try {
            logger.log("üîµ Connexion NFC...")
            isoDep.connect()
            logger.log("‚úÖ Connexion r√©ussie")

            isoDep.timeout = 5000

            // 1Ô∏è‚É£ SELECT Master File
            val selectMF = byteArrayOf(0x00, 0xA4.toByte(), 0x00, 0x0C, 0x02, 0x3F, 0x00)
            logger.log("‚û°Ô∏è SELECT MF : ${selectMF.toHex()}")
            isoDep.transceive(selectMF).also { logger.log("‚¨ÖÔ∏è R√©ponse MF : ${it.toHex()}") }

            // 2Ô∏è‚É£ SELECT IAS-ECC AID
            val selectIAS = byteArrayOf(
                0x00, 0xA4.toByte(), 0x04, 0x00, 0x0D,
                0xA0.toByte(), 0x00, 0x00, 0x01, 0x67, 0x45, 0x53, 0x49, 0x41, 0x53, 0x43, 0x45, 0x43
            )
            logger.log("‚û°Ô∏è SELECT IAS-ECC AID : ${selectIAS.toHex()}")
            isoDep.transceive(selectIAS).also { logger.log("‚¨ÖÔ∏è R√©ponse AID : ${it.toHex()}") }

            // 3Ô∏è‚É£ SELECT le fichier Identity (0500)
            val selectIdentity = byteArrayOf(0x00, 0xA4.toByte(), 0x02, 0x0C, 0x02, 0x05, 0x00)
            logger.log("‚û°Ô∏è SELECT fichier 0500 (identit√©)")
            isoDep.transceive(selectIdentity).also { logger.log("‚¨ÖÔ∏è R√©ponse 0500 : ${it.toHex()}") }

            // 4Ô∏è‚É£ READ BINARY (on lit les infos personnelles)
            val readBinary = byteArrayOf(0x00, 0xB0.toByte(), 0x00, 0x00, 0x00)
            logger.log("‚û°Ô∏è READ BINARY sur 0500")
            val dataIdentity = isoDep.transceive(readBinary)
            logger.log("‚¨ÖÔ∏è Donn√©es identit√© : ${dataIdentity.toHex()}")

            // 5Ô∏è‚É£ Parse grossier des donn√©es (debug)
            val text = String(dataIdentity.dropLast(2).toByteArray())
            logger.log("üìÑ Infos brutes :\n$text")

            // (bonus plus tard : d√©couper proprement en Nom / Pr√©nom / DDN)

            // 6Ô∏è‚É£ Lire aussi la photo : SELECT 0600 + READ BINARY
            val selectPhoto = byteArrayOf(0x00, 0xA4.toByte(), 0x02, 0x0C, 0x02, 0x06, 0x00)
            logger.log("‚û°Ô∏è SELECT fichier 0600 (photo)")
            isoDep.transceive(selectPhoto).also { logger.log("‚¨ÖÔ∏è R√©ponse 0600 : ${it.toHex()}") }

            val readPhoto = byteArrayOf(0x00, 0xB0.toByte(), 0x00, 0x00, 0x00)
            logger.log("‚û°Ô∏è READ BINARY sur 0600")
            val dataPhoto = isoDep.transceive(readPhoto)
            logger.log("‚¨ÖÔ∏è Photo re√ßue (${dataPhoto.size} octets)")

            // Ensuite √† toi de d√©coder JPEG2000 (option √† ajouter)

        } catch (e: Exception) {
            logger.log("‚ùå Exception : ${e.message}")
            throw e
        } finally {
            try { isoDep.close(); logger.log("üîí D√©connexion NFC") } catch (_: Exception) {}
        }
    }

    private fun ByteArray.toHex(): String =
        joinToString(" ") { "%02X".format(it) }
}
